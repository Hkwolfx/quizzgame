// Dans SessionTracker.tsx
import React, { useState, useEffect } from "react";

interface SessionTrackerProps {
  sessionStatus: string;
}

const SessionTracker: React.FC<SessionTrackerProps> = ({ sessionStatus }) => {
  const [startedSessions, setStartedSessions] = useState<number>(0);
  const [previousStatus, setPreviousStatus] = useState<string>("inactive");

  useEffect(() => {
    // Chaque fois que le statut de la session passe de 'inactive' √† 'active', cela signifie qu'une nouvelle session a commenc√©.
    if (sessionStatus === "active" && previousStatus === "inactive") {
      setStartedSessions((prev) => prev + 1);
    }
    // Mettre √† jour le statut pr√©c√©dent pour la prochaine v√©rification
    setPreviousStatus(sessionStatus);
  }, [sessionStatus, previousStatus]); // D√©pendance √† sessionStatus et previousStatus pour r√©agir aux changements

  return (
    <div>
      {Array.from({ length: startedSessions }, (_, index) => (
        <span key={index}>üü¢</span>
      ))}
    </div>
  );
};

export default SessionTracker;
